// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrierTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CrierTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace crier {
namespace test {

namespace {

const ::google::protobuf::Descriptor* test_msg_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_msg_2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_msg_2_reflection_ = NULL;
const ::google::protobuf::Descriptor* root_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  root_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CrierTest_2eproto() {
  protobuf_AddDesc_CrierTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CrierTest.proto");
  GOOGLE_CHECK(file != NULL);
  test_msg_1_descriptor_ = file->message_type(0);
  static const int test_msg_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_1, id_),
  };
  test_msg_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_1_descriptor_,
      test_msg_1::default_instance_,
      test_msg_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_1));
  test_msg_2_descriptor_ = file->message_type(1);
  static const int test_msg_2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_2, data_),
  };
  test_msg_2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_msg_2_descriptor_,
      test_msg_2::default_instance_,
      test_msg_2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_msg_2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_msg_2));
  root_msg_descriptor_ = file->message_type(2);
  static const int root_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root_msg, test_msg_1_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root_msg, test_msg_2_field_),
  };
  root_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      root_msg_descriptor_,
      root_msg::default_instance_,
      root_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(root_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(root_msg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CrierTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_1_descriptor_, &test_msg_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_msg_2_descriptor_, &test_msg_2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    root_msg_descriptor_, &root_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CrierTest_2eproto() {
  delete test_msg_1::default_instance_;
  delete test_msg_1_reflection_;
  delete test_msg_2::default_instance_;
  delete test_msg_2_reflection_;
  delete root_msg::default_instance_;
  delete root_msg_reflection_;
}

void protobuf_AddDesc_CrierTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017CrierTest.proto\022\ncrier.test\"\030\n\ntest_ms"
    "g_1\022\n\n\002id\030\001 \002(\r\"\032\n\ntest_msg_2\022\014\n\004data\030\001 "
    "\002(\t\"n\n\010root_msg\0220\n\020test_msg_1_field\030\001 \001("
    "\0132\026.crier.test.test_msg_1\0220\n\020test_msg_2_"
    "field\030\002 \001(\0132\026.crier.test.test_msg_2", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CrierTest.proto", &protobuf_RegisterTypes);
  test_msg_1::default_instance_ = new test_msg_1();
  test_msg_2::default_instance_ = new test_msg_2();
  root_msg::default_instance_ = new root_msg();
  test_msg_1::default_instance_->InitAsDefaultInstance();
  test_msg_2::default_instance_->InitAsDefaultInstance();
  root_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CrierTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CrierTest_2eproto {
  StaticDescriptorInitializer_CrierTest_2eproto() {
    protobuf_AddDesc_CrierTest_2eproto();
  }
} static_descriptor_initializer_CrierTest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int test_msg_1::kIdFieldNumber;
#endif  // !_MSC_VER

test_msg_1::test_msg_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_1::InitAsDefaultInstance() {
}

test_msg_1::test_msg_1(const test_msg_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_1::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_1::~test_msg_1() {
  SharedDtor();
}

void test_msg_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void test_msg_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_1_descriptor_;
}

const test_msg_1& test_msg_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrierTest_2eproto();
  return *default_instance_;
}

test_msg_1* test_msg_1::default_instance_ = NULL;

test_msg_1* test_msg_1::New() const {
  return new test_msg_1;
}

void test_msg_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_1::MergeFrom(const test_msg_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_1::CopyFrom(const test_msg_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void test_msg_1::Swap(test_msg_1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_1_descriptor_;
  metadata.reflection = test_msg_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_msg_2::kDataFieldNumber;
#endif  // !_MSC_VER

test_msg_2::test_msg_2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_msg_2::InitAsDefaultInstance() {
}

test_msg_2::test_msg_2(const test_msg_2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_msg_2::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_msg_2::~test_msg_2() {
  SharedDtor();
}

void test_msg_2::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void test_msg_2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_msg_2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_msg_2_descriptor_;
}

const test_msg_2& test_msg_2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrierTest_2eproto();
  return *default_instance_;
}

test_msg_2* test_msg_2::default_instance_ = NULL;

test_msg_2* test_msg_2::New() const {
  return new test_msg_2;
}

void test_msg_2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_msg_2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_msg_2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_msg_2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_msg_2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_msg_2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_msg_2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_msg_2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_msg_2::MergeFrom(const test_msg_2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_msg_2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_msg_2::CopyFrom(const test_msg_2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void test_msg_2::Swap(test_msg_2* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_msg_2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_msg_2_descriptor_;
  metadata.reflection = test_msg_2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int root_msg::kTestMsg1FieldFieldNumber;
const int root_msg::kTestMsg2FieldFieldNumber;
#endif  // !_MSC_VER

root_msg::root_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void root_msg::InitAsDefaultInstance() {
  test_msg_1_field_ = const_cast< ::crier::test::test_msg_1*>(&::crier::test::test_msg_1::default_instance());
  test_msg_2_field_ = const_cast< ::crier::test::test_msg_2*>(&::crier::test::test_msg_2::default_instance());
}

root_msg::root_msg(const root_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void root_msg::SharedCtor() {
  _cached_size_ = 0;
  test_msg_1_field_ = NULL;
  test_msg_2_field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

root_msg::~root_msg() {
  SharedDtor();
}

void root_msg::SharedDtor() {
  if (this != default_instance_) {
    delete test_msg_1_field_;
    delete test_msg_2_field_;
  }
}

void root_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* root_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return root_msg_descriptor_;
}

const root_msg& root_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrierTest_2eproto();
  return *default_instance_;
}

root_msg* root_msg::default_instance_ = NULL;

root_msg* root_msg::New() const {
  return new root_msg;
}

void root_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_test_msg_1_field()) {
      if (test_msg_1_field_ != NULL) test_msg_1_field_->::crier::test::test_msg_1::Clear();
    }
    if (has_test_msg_2_field()) {
      if (test_msg_2_field_ != NULL) test_msg_2_field_->::crier::test::test_msg_2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool root_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crier.test.test_msg_1 test_msg_1_field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_msg_1_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_test_msg_2_field;
        break;
      }

      // optional .crier.test.test_msg_2 test_msg_2_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_msg_2_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_msg_2_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void root_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .crier.test.test_msg_1 test_msg_1_field = 1;
  if (has_test_msg_1_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->test_msg_1_field(), output);
  }

  // optional .crier.test.test_msg_2 test_msg_2_field = 2;
  if (has_test_msg_2_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->test_msg_2_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* root_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .crier.test.test_msg_1 test_msg_1_field = 1;
  if (has_test_msg_1_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->test_msg_1_field(), target);
  }

  // optional .crier.test.test_msg_2 test_msg_2_field = 2;
  if (has_test_msg_2_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->test_msg_2_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int root_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .crier.test.test_msg_1 test_msg_1_field = 1;
    if (has_test_msg_1_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_msg_1_field());
    }

    // optional .crier.test.test_msg_2 test_msg_2_field = 2;
    if (has_test_msg_2_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_msg_2_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void root_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const root_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const root_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void root_msg::MergeFrom(const root_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_msg_1_field()) {
      mutable_test_msg_1_field()->::crier::test::test_msg_1::MergeFrom(from.test_msg_1_field());
    }
    if (from.has_test_msg_2_field()) {
      mutable_test_msg_2_field()->::crier::test::test_msg_2::MergeFrom(from.test_msg_2_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void root_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void root_msg::CopyFrom(const root_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool root_msg::IsInitialized() const {

  if (has_test_msg_1_field()) {
    if (!this->test_msg_1_field().IsInitialized()) return false;
  }
  if (has_test_msg_2_field()) {
    if (!this->test_msg_2_field().IsInitialized()) return false;
  }
  return true;
}

void root_msg::Swap(root_msg* other) {
  if (other != this) {
    std::swap(test_msg_1_field_, other->test_msg_1_field_);
    std::swap(test_msg_2_field_, other->test_msg_2_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata root_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = root_msg_descriptor_;
  metadata.reflection = root_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace crier

// @@protoc_insertion_point(global_scope)
