// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrierTest.proto

#ifndef PROTOBUF_CrierTest_2eproto__INCLUDED
#define PROTOBUF_CrierTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace crier {
namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CrierTest_2eproto();
void protobuf_AssignDesc_CrierTest_2eproto();
void protobuf_ShutdownFile_CrierTest_2eproto();

class ping;
class pong;
class root_msg;

// ===================================================================

class ping : public ::google::protobuf::Message {
 public:
  ping();
  virtual ~ping();

  ping(const ping& from);

  inline ping& operator=(const ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ping& default_instance();

  void Swap(ping* other);

  // implements Message ----------------------------------------------

  ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ping& from);
  void MergeFrom(const ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:crier.test.ping)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrierTest_2eproto();
  friend void protobuf_AssignDesc_CrierTest_2eproto();
  friend void protobuf_ShutdownFile_CrierTest_2eproto();

  void InitAsDefaultInstance();
  static ping* default_instance_;
};
// -------------------------------------------------------------------

class pong : public ::google::protobuf::Message {
 public:
  pong();
  virtual ~pong();

  pong(const pong& from);

  inline pong& operator=(const pong& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pong& default_instance();

  void Swap(pong* other);

  // implements Message ----------------------------------------------

  pong* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pong& from);
  void MergeFrom(const pong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:crier.test.pong)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrierTest_2eproto();
  friend void protobuf_AssignDesc_CrierTest_2eproto();
  friend void protobuf_ShutdownFile_CrierTest_2eproto();

  void InitAsDefaultInstance();
  static pong* default_instance_;
};
// -------------------------------------------------------------------

class root_msg : public ::google::protobuf::Message {
 public:
  root_msg();
  virtual ~root_msg();

  root_msg(const root_msg& from);

  inline root_msg& operator=(const root_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const root_msg& default_instance();

  void Swap(root_msg* other);

  // implements Message ----------------------------------------------

  root_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const root_msg& from);
  void MergeFrom(const root_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crier.test.ping ping_field = 10;
  inline bool has_ping_field() const;
  inline void clear_ping_field();
  static const int kPingFieldFieldNumber = 10;
  inline const ::crier::test::ping& ping_field() const;
  inline ::crier::test::ping* mutable_ping_field();
  inline ::crier::test::ping* release_ping_field();
  inline void set_allocated_ping_field(::crier::test::ping* ping_field);

  // optional .crier.test.pong pong_field = 11;
  inline bool has_pong_field() const;
  inline void clear_pong_field();
  static const int kPongFieldFieldNumber = 11;
  inline const ::crier::test::pong& pong_field() const;
  inline ::crier::test::pong* mutable_pong_field();
  inline ::crier::test::pong* release_pong_field();
  inline void set_allocated_pong_field(::crier::test::pong* pong_field);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(root_msg)
  // @@protoc_insertion_point(class_scope:crier.test.root_msg)
 private:
  inline void set_has_ping_field();
  inline void clear_has_ping_field();
  inline void set_has_pong_field();
  inline void clear_has_pong_field();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::crier::test::ping* ping_field_;
  ::crier::test::pong* pong_field_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrierTest_2eproto();
  friend void protobuf_AssignDesc_CrierTest_2eproto();
  friend void protobuf_ShutdownFile_CrierTest_2eproto();

  void InitAsDefaultInstance();
  static root_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// ping

// required uint32 id = 1;
inline bool ping::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ping::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ping::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ping::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ping::id() const {
  return id_;
}
inline void ping::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// pong

// required uint32 id = 1;
inline bool pong::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pong::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pong::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pong::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 pong::id() const {
  return id_;
}
inline void pong::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// root_msg

// optional .crier.test.ping ping_field = 10;
inline bool root_msg::has_ping_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void root_msg::set_has_ping_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void root_msg::clear_has_ping_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void root_msg::clear_ping_field() {
  if (ping_field_ != NULL) ping_field_->::crier::test::ping::Clear();
  clear_has_ping_field();
}
inline const ::crier::test::ping& root_msg::ping_field() const {
  return ping_field_ != NULL ? *ping_field_ : *default_instance_->ping_field_;
}
inline ::crier::test::ping* root_msg::mutable_ping_field() {
  set_has_ping_field();
  if (ping_field_ == NULL) ping_field_ = new ::crier::test::ping;
  return ping_field_;
}
inline ::crier::test::ping* root_msg::release_ping_field() {
  clear_has_ping_field();
  ::crier::test::ping* temp = ping_field_;
  ping_field_ = NULL;
  return temp;
}
inline void root_msg::set_allocated_ping_field(::crier::test::ping* ping_field) {
  delete ping_field_;
  ping_field_ = ping_field;
  if (ping_field) {
    set_has_ping_field();
  } else {
    clear_has_ping_field();
  }
}

// optional .crier.test.pong pong_field = 11;
inline bool root_msg::has_pong_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void root_msg::set_has_pong_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void root_msg::clear_has_pong_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void root_msg::clear_pong_field() {
  if (pong_field_ != NULL) pong_field_->::crier::test::pong::Clear();
  clear_has_pong_field();
}
inline const ::crier::test::pong& root_msg::pong_field() const {
  return pong_field_ != NULL ? *pong_field_ : *default_instance_->pong_field_;
}
inline ::crier::test::pong* root_msg::mutable_pong_field() {
  set_has_pong_field();
  if (pong_field_ == NULL) pong_field_ = new ::crier::test::pong;
  return pong_field_;
}
inline ::crier::test::pong* root_msg::release_pong_field() {
  clear_has_pong_field();
  ::crier::test::pong* temp = pong_field_;
  pong_field_ = NULL;
  return temp;
}
inline void root_msg::set_allocated_pong_field(::crier::test::pong* pong_field) {
  delete pong_field_;
  pong_field_ = pong_field;
  if (pong_field) {
    set_has_pong_field();
  } else {
    clear_has_pong_field();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace crier

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CrierTest_2eproto__INCLUDED
